### Variables
@baseUrl = http://localhost:3000/api
@authToken = {{admin_login.response.body.data.accessToken}}

### ============================================================================
### SUBSCRIPTION MANAGEMENT ENDPOINTS
### ============================================================================
### Admin Login
# @name admin_login
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "user1@minispod.com",
  "password": "password123"
}


### 1. Get User Subscriptions
GET {{baseUrl}}/subscriptions
Authorization: Bearer {{authToken}}

### 2. Get User Subscriptions with Status Filter
GET {{baseUrl}}/subscriptions?status=ACTIVE&includeInstances=true
Authorization: Bearer {{authToken}}

### 3. Get User Subscriptions - All Statuses
GET {{baseUrl}}/subscriptions?includeInstances=false
Authorization: Bearer {{authToken}}

### ============================================================================
### SUBSCRIPTION VALIDATION
### ============================================================================

### 4. Validate Subscription Before Creation
POST {{baseUrl}}/subscriptions/validate
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "planId": "clxxxxxxxxxxxxxxxxxxxxx"
}

### 5. Validate Subscription - Invalid Plan ID
POST {{baseUrl}}/subscriptions/validate
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "planId": "invalid_plan_id"
}

### ============================================================================
### SUBSCRIPTION CREATION
### ============================================================================

### 6. Create New Subscription - N8N Basic Plan
POST {{baseUrl}}/subscriptions
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "planId": "cmepx3ggl000gvviigaab5b34"
}

### 7. Create New Subscription - Ghost Pro Plan
POST {{baseUrl}}/subscriptions
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "planId": "clyyyyyyyyyyyyyyyyyyy"
}

### 8. Create Subscription - Insufficient Credit (should fail)
POST {{baseUrl}}/subscriptions
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "planId": "cmepwamtx000gvvlpkuakhjcd"
}

### 9. Create Subscription - Invalid Plan ID (should fail)
POST {{baseUrl}}/subscriptions
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "planId": "invalid_plan"
}

### ============================================================================
### SUBSCRIPTION DETAILS
### ============================================================================

### 10. Get Subscription Details
GET {{baseUrl}}/subscriptions/cmeqypyu70003vva66j2ha44d
Authorization: Bearer {{authToken}}

### 11. Get Subscription Details - Not Found (should fail)
GET {{baseUrl}}/subscriptions/clnonexistentsubscription
Authorization: Bearer {{authToken}}

### ============================================================================
### SUBSCRIPTION UPGRADE
### ============================================================================

### 12. Upgrade Subscription to Higher Plan
PUT {{baseUrl}}/subscriptions/cmepx4h1p0007vvjvrfhpft1i/upgrade
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "newPlanId": "cmepx3ggo000ivviixctv7kjj"
}

### 13. Upgrade Subscription - Same Tier (should fail)
PUT {{baseUrl}}/subscriptions/clxxxxxxxxxxxxxxxxxxxxx/upgrade
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "newPlanId": "clxxxxxxxxxxxxxxxxxxxxx"
}

### 14. Upgrade Subscription - Lower Tier (should fail)
PUT {{baseUrl}}/subscriptions/clxxxxxxxxxxxxxxxxxxxxx/upgrade
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "newPlanId": "clzzzzzzzzzzzzzzzzzzzz"
}

### 15. Upgrade Subscription - Insufficient Credit (should fail)
PUT {{baseUrl}}/subscriptions/clxxxxxxxxxxxxxxxxxxxxx/upgrade
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "newPlanId": "clpremiumplanxxxxxxxxxx"
}

### ============================================================================
### SUBSCRIPTION CANCELLATION
### ============================================================================

### 16. Cancel Subscription with Reason
DELETE {{baseUrl}}/subscriptions/cmepx4h1p0007vvjvrfhpft1i
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "reason": "No longer needed for current project"
}

### 17. Cancel Subscription without Reason
DELETE {{baseUrl}}/subscriptions/clyyyyyyyyyyyyyyyyyyy
Authorization: Bearer {{authToken}}
Content-Type: application/json

{}

### 18. Cancel Already Cancelled Subscription (should fail)
DELETE {{baseUrl}}/subscriptions/cmepwcp720009vvnxyl2rlof2
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "reason": "Testing duplicate cancellation"
}

### 19. Cancel Non-existent Subscription (should fail)
DELETE {{baseUrl}}/subscriptions/clnonexistentsubscription
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "reason": "Testing non-existent subscription"
}

### ============================================================================
### ERROR SCENARIOS
### ============================================================================

### 20. Access Subscription without Authentication (should fail)
GET {{baseUrl}}/subscriptions

### 21. Create Subscription without Authentication (should fail)
POST {{baseUrl}}/subscriptions
Content-Type: application/json

{
  "planId": "clxxxxxxxxxxxxxxxxxxxxx"
}

### 22. Create Subscription with Invalid JWT (should fail)
POST {{baseUrl}}/subscriptions
Authorization: Bearer invalid_authToken
Content-Type: application/json

{
  "planId": "clxxxxxxxxxxxxxxxxxxxxx"
}

### 23. Create Subscription with Missing Plan ID (should fail)
POST {{baseUrl}}/subscriptions
Authorization: Bearer {{authToken}}
Content-Type: application/json

{}

### 24. Upgrade with Invalid Subscription ID (should fail)
PUT {{baseUrl}}/subscriptions/invalid_id/upgrade
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "newPlanId": "clyyyyyyyyyyyyyyyyyyy"
}

### ============================================================================
### EDGE CASES
### ============================================================================

### 25. Get Subscriptions with Invalid Status Filter
GET {{baseUrl}}/subscriptions?status=INVALID_STATUS
Authorization: Bearer {{authToken}}

### 26. Create Duplicate Subscription (should fail - upgrade-only policy)
POST {{baseUrl}}/subscriptions
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "planId": "clxxxxxxxxxxxxxxxxxxxxx"
}

### 27. Validate Subscription with Missing Plan ID (should fail)
POST {{baseUrl}}/subscriptions/validate
Authorization: Bearer {{authToken}}
Content-Type: application/json

{}

### 28. Cancel Subscription with Very Long Reason
DELETE {{baseUrl}}/subscriptions/clxxxxxxxxxxxxxxxxxxxxx
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "reason": "This is a very long cancellation reason that exceeds the normal length to test validation limits. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
}

### ============================================================================
### INTEGRATION TESTS
### ============================================================================

### 29. Full Subscription Lifecycle Test
# Step 1: Validate subscription
POST {{baseUrl}}/subscriptions/validate
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "planId": "clxxxxxxxxxxxxxxxxxxxxx"
}

###
# Step 2: Create subscription
POST {{baseUrl}}/subscriptions
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "planId": "clxxxxxxxxxxxxxxxxxxxxx"
}

###
# Step 3: Get subscription details
GET {{baseUrl}}/subscriptions/clxxxxxxxxxxxxxxxxxxxxx
Authorization: Bearer {{authToken}}

###
# Step 4: Upgrade subscription
PUT {{baseUrl}}/subscriptions/clxxxxxxxxxxxxxxxxxxxxx/upgrade
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "newPlanId": "clyyyyyyyyyyyyyyyyyyy"
}

###
# Step 5: Cancel subscription
DELETE {{baseUrl}}/subscriptions/clxxxxxxxxxxxxxxxxxxxxx
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "reason": "End of integration test"
}

### ============================================================================
### NOTES
### ============================================================================

# Before running these tests:
# 1. Update the @authToken variable with a valid JWT token
# 2. Replace plan IDs with actual plan IDs from your database
# 3. Replace subscription IDs with actual subscription IDs from your database
# 4. Ensure you have sufficient credit balance for subscription tests
# 5. Make sure the API server is running on http://localhost:3000

# Test Categories:
# - Basic CRUD operations
# - Authentication and authorization
# - Business logic validation (upgrade-only policy)
# - Credit balance validation
# - Quota availability checking
# - Error handling and edge cases
# - Integration workflow testing

# Expected Responses:
# - 200 OK: Successful operations
# - 201 Created: Successful subscription creation
# - 400 Bad Request: Validation errors, business rule violations
# - 401 Unauthorized: Missing or invalid authentication
# - 404 Not Found: Resource not found
# - 409 Conflict: Duplicate subscription attempts
# - 503 Service Unavailable: Quota exceeded

### ============================================================================
### INSTANCE STATUS TESTS (Added for instance status feature)
### ============================================================================

### Test 1: Get User Subscriptions (instances included by default)
GET {{baseUrl}}/subscriptions
Authorization: Bearer {{authToken}}

### Test 2: Get User Subscriptions without Instance Status (explicit)
GET {{baseUrl}}/subscriptions?includeInstances=false
Authorization: Bearer {{authToken}}

### Test 3: Get User Subscriptions with Instance Status (explicit)
GET {{baseUrl}}/subscriptions?includeInstances=true
Authorization: Bearer {{authToken}}

### Test 4: Get Subscription Details (should always include instance status)
GET {{baseUrl}}/subscriptions/cmepx4h1p0007vvjvrfhpft1i
Authorization: Bearer {{authToken}}

### Test 5: Verify Instance Status Fields in Response
# Expected instance fields in response:
# - id, name, subdomain, status, healthStatus
# - publicUrl, adminUrl, customDomain, sslEnabled
# - cpuUsage, memoryUsage, storageUsage
# - createdAt, lastStarted, lastHealthCheck
GET {{baseUrl}}/subscriptions
Authorization: Bearer {{authToken}}

### ============================================================================
### SUBSCRIPTION METRICS ENDPOINT (NEW)
### ============================================================================

### Test 6: Get Subscription Metrics - Active Subscription
GET {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh/metrics
Authorization: Bearer {{authToken}}

### Test 7: Get Subscription Metrics - Non-existent Subscription (should fail)
GET {{baseUrl}}/subscriptions/clnonexistentsubscription/metrics
Authorization: Bearer {{authToken}}

### Test 8: Get Subscription Metrics - No Running Instance (should fail)
GET {{baseUrl}}/subscriptions/cmepwcp720009vvnxyl2rlof2/metrics
Authorization: Bearer {{authToken}}

### Test 9: Get Subscription Metrics - Without Authentication (should fail)
GET {{baseUrl}}/subscriptions/cmepx4h1p0007vvjvrfhpft1i/metrics

### Test 10: Get Subscription Metrics - Invalid Subscription ID Format (should fail)
GET {{baseUrl}}/subscriptions/invalid_id_format/metrics
Authorization: Bearer {{authToken}}

### ============================================================================
### METRICS POLLING SIMULATION (For Frontend)
### ============================================================================

### Polling Test 1: Get Metrics (simulate 5-second polling)
GET {{baseUrl}}/subscriptions/cmepx4h1p0007vvjvrfhpft1i/metrics
Authorization: Bearer {{authToken}}

### Polling Test 2: Get Metrics Again (simulate next poll)
GET {{baseUrl}}/subscriptions/cmepx4h1p0007vvjvrfhpft1i/metrics
Authorization: Bearer {{authToken}}

### Polling Test 3: Get Metrics Third Time (simulate continuous polling)
GET {{baseUrl}}/subscriptions/cmepx4h1p0007vvjvrfhpft1i/metrics
Authorization: Bearer {{authToken}}

### ============================================================================
### METRICS RESPONSE STRUCTURE NOTES
### ============================================================================

# Expected Metrics Response Structure:
# {
#   "success": true,
#   "data": {
#     "subscriptionId": "cmepx4h1p0007vvjvrfhpft1i",
#     "instanceId": "cmeslquw90007vv4azb9pes44",
#     "podName": "n8n-automation-ojnin1-meslquw8-5f946cdb9c-bxhjg",
#     "namespace": "user-cmeqxj3jp0000vvzcbfojnin1",
#     "status": "RUNNING",
#     "resourceLimits": {
#       "cpu": "500m",
#       "memory": "512Mi",
#       "storage": "1Gi"
#     },
#     "metrics": {
#       "timestamp": "2025-08-26T13:45:30Z",
#       "window": "1m",
#       "containers": [
#         {
#           "name": "n8n",
#           "usage": {
#             "cpu": {
#               "raw": "45000000n",
#               "millicores": 45,
#               "cores": 0.045
#             },
#             "memory": {
#               "raw": "128Ki",
#               "bytes": 131072,
#               "megabytes": 0.125,
#               "gigabytes": 0.0001
#             }
#           }
#         }
#       ]
#     },
#     "urls": {
#       "public": "https://n8n-automation-user123.minispod.com",
#       "admin": "https://n8n-automation-user123.minispod.com/admin"
#     }
#   },
#   "message": "Subscription metrics retrieved successfully",
#   "timestamp": "2025-08-26T13:45:30.123Z"
# }

# Frontend Polling Implementation Notes:
# - Poll every 5-10 seconds for real-time metrics
# - Handle 404 errors gracefully (instance not running)
# - Handle 503 errors (Kubernetes unavailable)
# - Cache previous values to show trends
# - Display resource utilization as percentages (usage/limits * 100)

### ============================================================================
### RETRY PROVISIONING ENDPOINT (NEW)
### ============================================================================

### Test 11: Retry Provisioning for Failed Subscription
POST {{baseUrl}}/subscriptions/cmepx4h1p0007vvjvrfhpft1i/retry-provisioning
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Test 12: Retry Provisioning - Non-existent Subscription (should fail)
POST {{baseUrl}}/subscriptions/clnonexistentsubscription/retry-provisioning
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Test 13: Retry Provisioning - Already Running Service (should fail)
POST {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh/retry-provisioning
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Test 14: Retry Provisioning - Without Authentication (should fail)
POST {{baseUrl}}/subscriptions/cmepx4h1p0007vvjvrfhpft1i/retry-provisioning
Content-Type: application/json

### Test 15: Retry Provisioning - Invalid Subscription ID Format (should fail)
POST {{baseUrl}}/subscriptions/invalid_id_format/retry-provisioning
Authorization: Bearer {{authToken}}
Content-Type: application/json

### ============================================================================
### RETRY PROVISIONING WORKFLOW TEST
### ============================================================================

### Workflow Test 1: Check Subscription Status Before Retry
GET {{baseUrl}}/subscriptions/cmepx4h1p0007vvjvrfhpft1i
Authorization: Bearer {{authToken}}

### Workflow Test 2: Retry Provisioning
POST {{baseUrl}}/subscriptions/cmepx4h1p0007vvjvrfhpft1i/retry-provisioning
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Workflow Test 3: Check Subscription Status After Retry (should show PENDING/PROVISIONING)
GET {{baseUrl}}/subscriptions/cmepx4h1p0007vvjvrfhpft1i
Authorization: Bearer {{authToken}}

### Workflow Test 4: Wait and Check Again (simulate monitoring)
GET {{baseUrl}}/subscriptions/cmepx4h1p0007vvjvrfhpft1i
Authorization: Bearer {{authToken}}

### ============================================================================
### RETRY PROVISIONING NOTES
### ============================================================================

# Expected Retry Provisioning Response Structure:
# {
#   "success": true,
#   "data": {
#     "subscription": {
#       "id": "cmepx4h1p0007vvjvrfhpft1i",
#       "status": "ACTIVE",
#       "service": { "name": "N8N Automation", "slug": "n8n-automation" },
#       "plan": { "name": "Basic", "planType": "BASIC" }
#     },
#     "instance": {
#       "id": "cmeslquw90007vv4azb9pes44",
#       "name": "n8n-automation-user123",
#       "status": "PENDING",
#       "previousStatus": "ERROR"
#     },
#     "message": "Provisioning retry initiated successfully",
#     "estimatedTime": "2-5 minutes",
#     "nextSteps": [
#       "Previous failed resources will be cleaned up",
#       "New Kubernetes resources are being created",
#       "You will be notified when the service is ready",
#       "Check instance status for updates"
#     ]
#   },
#   "message": "Provisioning retry initiated successfully",
#   "timestamp": "2025-08-27T13:37:00.123Z"
# }

# Retry Provisioning Business Rules:
# - Only works for subscriptions with ERROR or TERMINATED instances
# - Cannot retry if service is already RUNNING or PROVISIONING
# - Requires active subscription status
# - User can only retry their own subscriptions
# - Kubernetes cluster must be available
# - Previous failed resources are automatically cleaned up
# - New provisioning process starts from scratch

# Frontend Implementation Notes:
# - Show retry button only for failed instances (ERROR status)
# - Disable retry button during PROVISIONING status
# - Poll subscription status after retry to show progress
# - Display estimated time and next steps to user
# - Handle all error scenarios gracefully

### ============================================================================
### RESTART SUBSCRIPTION SERVICE ENDPOINT (NEW)
### ============================================================================

### Test 1: Restart Subscription Service (Success Case)
POST {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1/restart
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Test 2: Restart Non-existent Subscription (should fail)
POST {{baseUrl}}/subscriptions/clnonexistentsubscription/restart
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Test 3: Restart Subscription Without Authentication (should fail)
POST {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh/restart
Content-Type: application/json

### Test 4: Restart Subscription with Invalid JWT (should fail)
POST {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh/restart
Authorization: Bearer invalid_jwt_token
Content-Type: application/json

### Test 5: Restart Subscription Belonging to Another User (should fail)
# Note: Use different user's subscription ID
POST {{baseUrl}}/subscriptions/other-user-subscription-id/restart
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Test 6: Restart Subscription with No Running Instance (should fail)
# Note: Use subscription ID that has no running instances
POST {{baseUrl}}/subscriptions/no-running-instance-subscription/restart
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Test 7: Restart Subscription with ERROR Status Instance (should fail)
# Note: Use subscription ID that has ERROR status instance
POST {{baseUrl}}/subscriptions/error-instance-subscription/restart
Authorization: Bearer {{authToken}}
Content-Type: application/json

### ============================================================================
### RESTART SUBSCRIPTION WORKFLOW TESTS
### ============================================================================

### Workflow Test 1: Check Subscription Status Before Restart
GET {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh
Authorization: Bearer {{authToken}}

### Workflow Test 2: Perform Restart via Subscription
POST {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh/restart
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Workflow Test 3: Check Subscription Status After Restart (should show new pod name)
GET {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh
Authorization: Bearer {{authToken}}

### Workflow Test 4: Verify Instance Status After Restart
GET {{baseUrl}}/instances
Authorization: Bearer {{authToken}}

### Workflow Test 5: Check Subscription Metrics After Restart
GET {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh/metrics
Authorization: Bearer {{authToken}}

### ============================================================================
### RESTART VS RETRY COMPARISON (SUBSCRIPTION LEVEL)
### ============================================================================

### Scenario 1: Restart Running Subscription Service (Rolling Restart)
# Use case: Service is running but has issues (memory leak, hung processes)
# Expected: Pod is restarted with minimal downtime, same configuration
POST {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh/restart
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Scenario 2: Retry Provisioning for Failed Subscription (Full Redeploy)
# Use case: Service deployment failed completely (ERROR status)
# Expected: Complete cleanup and redeploy from scratch
POST {{baseUrl}}/subscriptions/cmeso4snn000bvvdx0n4a3wko/retry-provisioning
Authorization: Bearer {{authToken}}
Content-Type: application/json

### ============================================================================
### RESTART SUBSCRIPTION RESPONSE STRUCTURE VALIDATION
### ============================================================================

### Test Expected Restart Response Structure
POST {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh/restart
Authorization: Bearer {{authToken}}
Content-Type: application/json

# Expected Response Structure:
# {
#   "success": true,
#   "statusCode": 200,
#   "data": {
#     "instance": {
#       "id": "cmeslquw90007vv4azb9pes44",
#       "name": "n8n-automation-user123",
#       "status": "RUNNING",
#       "service": { "name": "N8N Automation", "slug": "n8n-automation" },
#       "plan": { "name": "Basic", "planType": "BASIC" }
#     },
#     "restart": {
#       "oldPodName": "n8n-automation-user123-abc123",
#       "newPodName": "n8n-automation-user123-def456",
#       "restartTime": "2025-08-27T14:35:00.000Z",
#       "method": "Rolling Restart"
#     },
#     "subscription": {
#       "id": "cmeslquvy0005vv4auasdgjzh",
#       "service": { "name": "N8N Automation", "slug": "n8n-automation" },
#       "plan": { "name": "Basic", "planType": "BASIC" },
#       "status": "ACTIVE"
#     },
#     "message": "Service instance restarted successfully",
#     "estimatedDowntime": "< 30 seconds",
#     "nextSteps": [
#       "New pod is being created with fresh state",
#       "Old pod will be terminated gracefully",
#       "Service should be available shortly",
#       "Check instance status for updates"
#     ]
#   },
#   "message": "Subscription service restarted successfully",
#   "timestamp": "2025-08-27T14:35:00.123Z"
# }

### ============================================================================
### RESTART SUBSCRIPTION EDGE CASES
### ============================================================================

### Edge Case 1: Restart Subscription During Provisioning (should fail)
# Note: Use subscription that is currently in PROVISIONING status
POST {{baseUrl}}/subscriptions/provisioning-subscription-id/restart
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Edge Case 2: Multiple Restart Requests (should handle gracefully)
# First restart request
POST {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh/restart
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Immediate second restart request (should fail or queue)
POST {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh/restart
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Edge Case 3: Restart Cancelled Subscription (should fail)
# Note: Use subscription that has been cancelled
POST {{baseUrl}}/subscriptions/cancelled-subscription-id/restart
Authorization: Bearer {{authToken}}
Content-Type: application/json

### ============================================================================
### RESTART SUBSCRIPTION PERFORMANCE TESTS
### ============================================================================

### Performance Test 1: Measure Restart Time via Subscription
# Step 1: Record start time and restart
POST {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh/restart
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Performance Test 2: Monitor Restart Progress via Subscription
# Step 2: Check status immediately after restart
GET {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh
Authorization: Bearer {{authToken}}

### Performance Test 3: Verify Service Availability via Metrics
# Step 3: Check if service is accessible (wait 30 seconds then test)
GET {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh/metrics
Authorization: Bearer {{authToken}}

### ============================================================================
### RESTART SUBSCRIPTION FUNCTIONALITY NOTES
### ============================================================================

# Restart Subscription vs Restart Instance:
#
# RESTART SUBSCRIPTION:
# - User-friendly endpoint: POST /api/subscriptions/:id/restart
# - Automatically finds running instance for the subscription
# - Validates subscription ownership and status
# - Returns subscription context in response
# - Better UX for users who think in terms of subscriptions
#
# RESTART INSTANCE:
# - Technical endpoint: POST /api/instances/:id/restart
# - Requires user to know specific instance ID
# - Direct instance manipulation
# - More granular control for advanced users
#
# Both endpoints:
# - Use the same underlying restart logic
# - Perform Kubernetes rolling restart
# - Update pod names and health status
# - Provide same restart functionality
#
# Restart Subscription Business Rules:
# - Only works for ACTIVE subscriptions
# - Must have at least one RUNNING instance
# - User can only restart their own subscriptions
# - Kubernetes cluster must be available
# - Rolling restart preserves service availability
# - Response includes both instance and subscription context
#
# Frontend Implementation Notes:
# - Show restart button on subscription dashboard
# - Use subscription-based endpoint for better UX
# - Display subscription context in restart confirmation
# - Poll subscription status after restart
# - Show both subscription and instance information
# - Handle all error scenarios with clear messages

### ============================================================================
### STOP SUBSCRIPTION SERVICE FUNCTIONALITY (NEW)
### ============================================================================

### Test 1: Stop Running Subscription Service (Success Case)
PUT {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1/stop
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Test 2: Stop Non-existent Subscription (should fail)
PUT {{baseUrl}}/subscriptions/clnonexistentsubscription/stop
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Test 3: Stop Subscription Without Authentication (should fail)
PUT {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1/stop
Content-Type: application/json

### Test 4: Stop Subscription with Invalid JWT (should fail)
PUT {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1/stop
Authorization: Bearer invalid_jwt_token
Content-Type: application/json

### Test 5: Stop Subscription Belonging to Another User (should fail)
# Note: Use different user's subscription ID
PUT {{baseUrl}}/subscriptions/other-user-subscription-id/stop
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Test 6: Stop Subscription with No Running Instance (should fail)
# Note: Use subscription ID that has no running instances
PUT {{baseUrl}}/subscriptions/no-running-instance-subscription/stop
Authorization: Bearer {{authToken}}
Content-Type: application/json

### ============================================================================
### START SUBSCRIPTION SERVICE FUNCTIONALITY (NEW)
### ============================================================================

### Test 7: Start Stopped Subscription Service (Success Case)
PUT {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1/start
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Test 8: Start Non-existent Subscription (should fail)
PUT {{baseUrl}}/subscriptions/clnonexistentsubscription/start
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Test 9: Start Subscription Without Authentication (should fail)
PUT {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1/start
Content-Type: application/json

### Test 10: Start Subscription with Invalid JWT (should fail)
PUT {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1/start
Authorization: Bearer invalid_jwt_token
Content-Type: application/json

### Test 11: Start Subscription Belonging to Another User (should fail)
# Note: Use different user's subscription ID
PUT {{baseUrl}}/subscriptions/other-user-subscription-id/start
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Test 12: Start Subscription with No Stopped Instance (should fail)
# Note: Use subscription ID that has no stopped instances
PUT {{baseUrl}}/subscriptions/no-stopped-instance-subscription/start
Authorization: Bearer {{authToken}}
Content-Type: application/json

### ============================================================================
### SUBSCRIPTION STOP/START WORKFLOW TESTS
### ============================================================================

### Workflow Test 1: Check Subscription Status Before Stop
GET {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1
Authorization: Bearer {{authToken}}

### Workflow Test 2: Stop Running Subscription Service
PUT {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1/stop
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Workflow Test 3: Check Subscription Status After Stop (should show STOPPED instance)
GET {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1
Authorization: Bearer {{authToken}}

### Workflow Test 4: Verify Subscription List Shows Stopped Status
GET {{baseUrl}}/subscriptions?includeInstances=true
Authorization: Bearer {{authToken}}

### Workflow Test 5: Start Stopped Subscription Service
PUT {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1/start
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Workflow Test 6: Check Subscription Status After Start (should show RUNNING instance)
GET {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1
Authorization: Bearer {{authToken}}

### Workflow Test 7: Verify Subscription List Shows Running Status
GET {{baseUrl}}/subscriptions?includeInstances=true
Authorization: Bearer {{authToken}}

### ============================================================================
### SUBSCRIPTION STOP/START VS OTHER OPERATIONS COMPARISON
### ============================================================================

### Scenario 1: Stop Subscription Service (Temporary, Reversible)
# Use case: User wants to pause service temporarily to save resources
# Expected: Instance status becomes STOPPED, pods terminated, data preserved
PUT {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1/stop
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Scenario 2: Start Subscription Service (Resume from Stopped)
# Use case: User wants to resume paused service
# Expected: Instance status becomes RUNNING, new pods created, data restored
PUT {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1/start
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Scenario 3: Restart Subscription Service (Rolling Restart)
# Use case: Service is running but has issues (memory leak, hung processes)
# Expected: Pod is restarted with minimal downtime, same configuration
POST {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1/restart
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Scenario 4: Retry Provisioning (Full Redeploy)
# Use case: Service deployment failed completely (ERROR status)
# Expected: Complete cleanup and redeploy from scratch
POST {{baseUrl}}/subscriptions/error-subscription-id/retry-provisioning
Authorization: Bearer {{authToken}}
Content-Type: application/json

### ============================================================================
### SUBSCRIPTION STOP/START RESPONSE STRUCTURE VALIDATION
### ============================================================================

### Test Expected Stop Response Structure
PUT {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1/stop
Authorization: Bearer {{authToken}}
Content-Type: application/json

# Expected Stop Response Structure:
# {
#   "success": true,
#   "statusCode": 200,
#   "data": {
#     "instance": {
#       "id": "cmeu4cgod0009vvborivibrmy",
#       "name": "n8n-automation-user123",
#       "status": "STOPPED",
#       "service": { "name": "N8N Automation", "slug": "n8n-automation" },
#       "plan": { "name": "Basic", "planType": "BASIC" }
#     },
#     "stop": {
#       "stoppedAt": "2025-08-27T15:46:00.000Z",
#       "method": "Scale to Zero",
#       "preservedData": true
#     },
#     "subscription": {
#       "id": "cmeu4cgo20007vvbohd84o1w1",
#       "service": { "name": "N8N Automation", "slug": "n8n-automation" },
#       "plan": { "name": "Basic", "planType": "BASIC" },
#       "status": "ACTIVE"
#     },
#     "message": "Service instance stopped successfully",
#     "nextSteps": [
#       "All pods have been terminated",
#       "Data and configuration are preserved",
#       "Use START to resume the service",
#       "Resources are freed up while stopped"
#     ]
#   },
#   "message": "Subscription service stopped successfully",
#   "timestamp": "2025-08-27T15:46:00.123Z"
# }

### Test Expected Start Response Structure
PUT {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1/start
Authorization: Bearer {{authToken}}
Content-Type: application/json

# Expected Start Response Structure:
# {
#   "success": true,
#   "statusCode": 200,
#   "data": {
#     "instance": {
#       "id": "cmeu4cgod0009vvborivibrmy",
#       "name": "n8n-automation-user123",
#       "status": "RUNNING",
#       "service": { "name": "N8N Automation", "slug": "n8n-automation" },
#       "plan": { "name": "Basic", "planType": "BASIC" }
#     },
#     "start": {
#       "startedAt": "2025-08-27T15:47:00.000Z",
#       "method": "Scale to One",
#       "newPodName": "n8n-automation-user123-def456"
#     },
#     "subscription": {
#       "id": "cmeu4cgo20007vvbohd84o1w1",
#       "service": { "name": "N8N Automation", "slug": "n8n-automation" },
#       "plan": { "name": "Basic", "planType": "BASIC" },
#       "status": "ACTIVE"
#     },
#     "message": "Service instance started successfully",
#     "nextSteps": [
#       "New pod has been created and is running",
#       "Service is now accessible",
#       "All data and configuration restored",
#       "Check instance status for updates"
#     ]
#   },
#   "message": "Subscription service started successfully",
#   "timestamp": "2025-08-27T15:47:00.123Z"
# }

### ============================================================================
### SUBSCRIPTION STOP/START FUNCTIONALITY NOTES
### ============================================================================

# Subscription Stop/Start vs Instance Stop/Start:
#
# SUBSCRIPTION STOP/START:
# - User-friendly endpoint: PUT /api/subscriptions/:id/stop|start
# - Automatically finds running/stopped instance for the subscription
# - Validates subscription ownership and status
# - Returns subscription context in response
# - Better UX for users who think in terms of subscriptions
#
# INSTANCE STOP/START:
# - Technical endpoint: PUT /api/instances/:id/stop|start
# - Requires user to know specific instance ID
# - Direct instance manipulation
# - More granular control for advanced users
#
# Both endpoints:
# - Use the same underlying stop/start logic
# - Perform Kubernetes scaling (0 replicas ↔ 1 replica)
# - Preserve data and configuration during stop/start cycle
# - Provide same functionality with different UX approaches
#
# Subscription Stop/Start Business Rules:
# - STOP only works for subscriptions with RUNNING instances
# - START only works for subscriptions with STOPPED instances
# - User can only control their own subscriptions
# - Kubernetes cluster must be available
# - Data and configuration are preserved during stop/start cycle
# - Pod names may change after start (new pod created)
# - Response includes both instance and subscription context
#
# Frontend Implementation Notes:
# - Show STOP button on subscription dashboard for running services
# - Show START button on subscription dashboard for stopped services
# - Use subscription-based endpoints for better UX
# - Display subscription context in stop/start confirmation
# - Poll subscription status after stop/start operations
# - Show both subscription and instance information
# - Handle all error scenarios with clear messages
# - Display estimated time and resource savings for stop operations

### ============================================================================
### SUBSCRIPTION BILLING INFO ENDPOINT (NEW)
### ============================================================================

### Test 1: Get Subscription Billing Info for Active Subscription (Success Case)
GET {{baseUrl}}/subscriptions/cmeu4cgo20007vvbohd84o1w1/billing-info
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Test 2: Get Subscription Billing Info - Non-existent Subscription (should fail)
GET {{baseUrl}}/subscriptions/clnonexistentsubscription/billing-info
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Test 3: Get Subscription Billing Info - Without Authentication (should fail)
GET {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh/billing-info
Content-Type: application/json

### Test 4: Get Subscription Billing Info - Invalid JWT (should fail)
GET {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh/billing-info
Authorization: Bearer invalid_jwt_token
Content-Type: application/json

### Test 5: Get Subscription Billing Info - Invalid Subscription ID Format (should fail)
GET {{baseUrl}}/subscriptions/invalid_id_format/billing-info
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Test 6: Get Subscription Billing Info - Cancelled Subscription (should fail)
# Note: Use subscription ID that has been cancelled
GET {{baseUrl}}/subscriptions/cancelled-subscription-id/billing-info
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Test 7: Get Subscription Billing Info - Subscription Belonging to Another User (should fail)
# Note: Use different user's subscription ID
GET {{baseUrl}}/subscriptions/other-user-subscription-id/billing-info
Authorization: Bearer {{authToken}}
Content-Type: application/json

### ============================================================================
### SUBSCRIPTION BILLING INFO WORKFLOW TESTS
### ============================================================================

### Workflow Test 1: Check Current Subscription Details
GET {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh
Authorization: Bearer {{authToken}}

### Workflow Test 2: Get Subscription Billing Info with Available Upgrades
GET {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh/billing-info
Authorization: Bearer {{authToken}}
Content-Type: application/json

### Workflow Test 3: Compare with Catalog Plans (for verification)
GET {{baseUrl}}/catalog/services/cmepx3ggj000evviidqhqhqhq/plans
Authorization: Bearer {{authToken}}

### Workflow Test 4: Check User Credit Balance (for upgrade feasibility)
GET {{baseUrl}}/wallet/info
Authorization: Bearer {{authToken}}

### ============================================================================
### SUBSCRIPTION BILLING INFO RESPONSE STRUCTURE VALIDATION
### ============================================================================

### Test Expected Billing Info Response Structure
GET {{baseUrl}}/subscriptions/cmeslquvy0005vv4auasdgjzh/billing-info
Authorization: Bearer {{authToken}}
Content-Type: application/json

# Expected Response Structure:
# {
#   "success": true,
#   "statusCode": 200,
#   "data": {
#     "currentPlan": {
#       "id": "cmepx3ggl000gvviigaab5b34",
#       "name": "Basic",
#       "planType": "BASIC",
#       "monthlyPrice": 50000,
#       "resources": {
#         "cpuMilli": 500,
#         "memoryMb": 512,
#         "storageGb": 1
#       },
#       "features": ["Feature A", "Feature B"]
#     },
#     "availableUpgrades": [
#       {
#         "id": "cmepx3ggo000ivviixctv7kjj",
#         "name": "Pro",
#         "planType": "PRO",
#         "monthlyPrice": 100000,
#         "upgradeCost": 25000,
#         "proratedDays": 15,
#         "resources": {
#           "cpuMilli": 1000,
#           "memoryMb": 1024,
#           "storageGb": 5
#         },
#         "quotaAvailable": true,
#         "canUpgrade": true
#       },
#       {
#         "id": "cmepx3ggr000kvviiwxyz1234",
#         "name": "Premium",
#         "planType": "PREMIUM",
#         "monthlyPrice": 200000,
#         "upgradeCost": 75000,
#         "proratedDays": 15,
#         "resources": {
#           "cpuMilli": 2000,
#           "memoryMb": 2048,
#           "storageGb": 10
#         },
#         "quotaAvailable": false,
#         "canUpgrade": false
#       }
#     ],
#     "userInfo": {
#       "creditBalance": 150000,
#       "hasUpgradeOptions": true,
#       "canUpgradeAny": true
#     },
#     "billingInfo": {
#       "daysRemaining": 15,
#       "nextBillingDate": "2025-09-15T00:00:00.000Z",
#       "proratedRatio": 0.5,
#       "autoRenew": true,
#       "monthlyPrice": 50000,
#       "lastChargeAmount": 50000,
#       "nextChargeAmount": 50000
#     },
#     "service": {
#       "id": "cmepx3ggj000evviidqhqhqhq",
#       "name": "N8N Automation",
#       "slug": "n8n-automation"
#     }
#   },
#   "message": "Available upgrade plans retrieved successfully",
#   "timestamp": "2025-08-30T02:59:00.123Z"
# }

### ============================================================================
### SUBSCRIPTION BILLING INFO FUNCTIONALITY NOTES
### ============================================================================

# Subscription Billing Info Business Rules:
# - Only shows plans from the same service (N8N to N8N, not N8N to Ghost)
# - Only shows higher tier plans (BASIC → PRO → PREMIUM → ENTERPRISE)
# - Calculates prorated upgrade cost based on remaining billing days
# - Checks quota availability for each plan
# - Validates user has sufficient credit for each upgrade option
# - Returns detailed information for upgrade decision making
# - Only works for ACTIVE subscriptions
# - User can only access their own subscription upgrade options

# Upgrade Cost Calculation:
# upgradeCost = (newPlanPrice - currentPlanPrice) * (daysRemaining / daysInMonth)
# - Prorated based on remaining days in current billing cycle
# - Rounded to nearest IDR (no decimals)
# - Positive value indicates additional cost
# - Zero cost for same-price plans (rare edge case)

# Frontend Implementation Notes:
# - Display current plan prominently with resources and features
# - Show upgrade options in order of price/tier
# - Highlight popular plans with visual indicators
# - Display upgrade cost clearly with prorated explanation
# - Show "Upgrade" button only for available plans (canUpgrade: true)
# - Display reasons for unavailable plans (quota full, insufficient credit)
# - Include resource comparison between current and upgrade plans
# - Show billing information and next billing date
# - Handle all error scenarios with clear messages
# - Refresh data when user's credit balance changes

# Integration with Other Endpoints:
# - Use with GET /api/subscriptions/:id for current subscription details
# - Use with GET /api/wallet/info for current credit balance
# - Use with PUT /api/subscriptions/:id/upgrade for actual upgrade
# - Use with GET /api/catalog/services/:id/plans for complete plan catalog